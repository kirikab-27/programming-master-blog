import Head from 'next/head'
import Image from 'next/image'
import { Inter } from 'next/font/google'
import styles from '@/styles/Home.module.css'
//graphql-requestパッケージを使用
//GraphQLClientはフロントエンドのこと
//gqlはクエリを叩くためのメソッド
import { GraphQLClient, gql}  from "graphql-request"; //バックエンド連携 
import BlogCard from '../components/BlogCard ';
//APIキーを設定しバックエンドと連携
const graphcms = new GraphQLClient(
  "https://api-ap-northeast-1.hygraph.com/v2/clh8qy5a38ub401umdmx5fp2r/master"
);
//QUERY:取得する -->GraphMSで作ったAPIに問い合わせをする
//GraphQLCMSのAPI-Playgroundで作成したクエリを貼り付ける
//QUERYはgqlでフェッチしてQUERYの中に入れている
const QUERY = gql`
{
  posts {
    id
    title
    datePublished
    slug
    content{
      html
    }
    photo{
      createdBy{
        id
      }
      url
    }
  }
}
`;

// SSG(Static Site Generator:静的生成)
// Next.jsがビルド(デプロイ)したときに事前にhtmlを作成しておく
// SSGを使わない場合はビルドしたときにはhtmlはまだ作成されていない
// SSGを使わない場合のhtmlの作成はユーザーからリクエストがあったときに生成される
// リクエストがあったときにhtmlを作成するので時間がかかる
// SSGの場合は、すでにhtmlが存在するのでユーザーからリクエストがあったときにすぐに提供できる
// つまりページの読み込み速度が早くなる
// ページの更新があまりないページはSSGで作成しておくとユーザービリティが上がる
// SSGはビルド時にしかhtmlを生成しないので、更新が多いページは内容を更新できないので不向き
// 更新が多い場合はSSR(サーバーサイドレンダリング)を使う
// SSGは料理に例えると作り置き

// 非同期処理 SSG
// SSG実装の書き方 公式ドキュメントに書いてある
// SSGを使いたいときは、getStaticProps関数を非同期処理(async)で使う
export async function getStaticProps(){
    //graphcms.requestでQUERYのデータを取ってくる
    // QUERYからpostsだけを取ってくる
    const { posts } = await graphcms.request(QUERY);
    return {
      //propsのプロパティの名前でその中にpostsデータを入れる
      props: {
        posts,
      },
    };
}

//const inter = Inter({ subsets: ['latin'] })

// postsデータをHomeコンポーネントに渡して<main>に出力していく
export default function Home({ posts }) {
  return (
    <div className={styles.container}>
      <Head>
        <title>Blog</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      {/* <main className={`${styles.main} ${inter.className}`}> */}
      <main className={styles.main}>
        <div className={styles.title}>
          <h2>Next.jsとGraphQLブログ</h2>
        </div>
        <div className={styles.gridWrapper}>
          {posts.map((post) => (
            <BlogCard 
              photo={post.photo} 
              title={post.title}
              date={post.datePublished}
              slug={post.slug}
              key={post.id}
            />
          ))}
        </div>
      </main>
    </div>
  )
}
